{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajku\\\\OneDrive\\\\Desktop\\\\Complete web dev\\\\MERN_Login_App_with_ResetEmail-Main\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this)\n}, void 0, false));\n\n// Lock  Let's break down the concept of ReactDOM.createRoot(element) and React's\n//  concurrent mode in simpler terms:\n\n// What is ReactDOM.createRoot(element)?\n// ReactDOM.createRoot(element) is a method provided by React to create\n// a new root for a React application at a specified DOM element. This root is used to manage\n// and render React components. The element parameter should be a DOM element where you want to mount\n// your React application. For example, if you have an HTML element with an id of 'root', you can use \n//document.getElementById('root') to retrieve this element and pass it to createRoot.\n\n// Example:\n// Suppose you have the following HTML structure:\n\n// html\n// Copy code\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <title>React App</title>\n// </head>\n// <body>\n//     <div id=\"root\"></div>\n// </body>\n// </html>\n// In your JavaScript (using React with JSX syntax):\n\n// Import React and ReactDOM:\n\n// javascript\n// Copy code\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// Create a Root:\n\n// javascript\n// Copy code\n// const rootElement = document.getElementById('root');\n// const root = ReactDOM.createRoot(rootElement);\n// const rootElement = document.getElementById('root');: This retrieves the DOM element with\n// the id 'root' from your HTML file.\n// const root = ReactDOM.createRoot(rootElement);: This creates a React root using createRoot and\n// associates it with rootElement.\n// Render React Components:\n\n// javascript\n// Copy code\n// root.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>\n// );\n// root.render(...): This method is used to render React components into the root. In this case, <App />\n// is the main component rendered into rootElement.\n// Concurrent Mode in React:\n// React's concurrent mode is a feature introduced to improve the user experience by making applications\n// more responsive and resilient to blocking operations. It allows React to work on multiple tasks \n//(such as rendering, data fetching, and user interactions) concurrently. ReactDOM.createRoot(element)\n// is part of this mode, enabling React to perform asynchronous rendering and prioritize updates based\n// on their urgency and importance.\n\n// Benefits of Concurrent Mode:\n// Improved Responsiveness: Allows React to respond to user interactions more quickly, making the\n// application feel more responsive.\n// Better User Experience: Reduces jankiness and delays caused by expensive operations (like rendering\n// large components or fetching data).\n// Prioritized Updates: React can decide which updates are more critical and should be processed first\n//, optimizing performance.\n// In summary, ReactDOM.createRoot(element) sets up a React application for concurrent mode rendering,\n// enhancing performance and user experience by enabling asynchronous updates and prioritizing tasks\n// more effectively. This method is integral to leveraging React's modern capabilities for building\n// robust web applications.\n// // lk","map":{"version":3,"names":["React","ReactDOM","App","root","createRoot","document","getElementById","render"],"sources":["C:/Users/rajku/OneDrive/Desktop/Complete web dev/MERN_Login_App_with_ResetEmail-Main/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n    <>\n        <App />\n    </>\n)\n\n\n\n// Lock  Let's break down the concept of ReactDOM.createRoot(element) and React's\n//  concurrent mode in simpler terms:\n\n// What is ReactDOM.createRoot(element)?\n// ReactDOM.createRoot(element) is a method provided by React to create\n// a new root for a React application at a specified DOM element. This root is used to manage\n// and render React components. The element parameter should be a DOM element where you want to mount\n// your React application. For example, if you have an HTML element with an id of 'root', you can use \n//document.getElementById('root') to retrieve this element and pass it to createRoot.\n\n// Example:\n// Suppose you have the following HTML structure:\n\n// html\n// Copy code\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <title>React App</title>\n// </head>\n// <body>\n//     <div id=\"root\"></div>\n// </body>\n// </html>\n// In your JavaScript (using React with JSX syntax):\n\n// Import React and ReactDOM:\n\n// javascript\n// Copy code\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// Create a Root:\n\n// javascript\n// Copy code\n// const rootElement = document.getElementById('root');\n// const root = ReactDOM.createRoot(rootElement);\n// const rootElement = document.getElementById('root');: This retrieves the DOM element with\n// the id 'root' from your HTML file.\n// const root = ReactDOM.createRoot(rootElement);: This creates a React root using createRoot and\n// associates it with rootElement.\n// Render React Components:\n\n// javascript\n// Copy code\n// root.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>\n// );\n// root.render(...): This method is used to render React components into the root. In this case, <App />\n// is the main component rendered into rootElement.\n// Concurrent Mode in React:\n// React's concurrent mode is a feature introduced to improve the user experience by making applications\n// more responsive and resilient to blocking operations. It allows React to work on multiple tasks \n//(such as rendering, data fetching, and user interactions) concurrently. ReactDOM.createRoot(element)\n// is part of this mode, enabling React to perform asynchronous rendering and prioritize updates based\n// on their urgency and importance.\n\n// Benefits of Concurrent Mode:\n// Improved Responsiveness: Allows React to respond to user interactions more quickly, making the\n// application feel more responsive.\n// Better User Experience: Reduces jankiness and delays caused by expensive operations (like rendering\n// large components or fetching data).\n// Prioritized Updates: React can decide which updates are more critical and should be processed first\n//, optimizing performance.\n// In summary, ReactDOM.createRoot(element) sets up a React application for concurrent mode rendering,\n// enhancing performance and user experience by enabling asynchronous updates and prioritizing tasks\n// more effectively. This method is integral to leveraging React's modern capabilities for building\n// robust web applications.\n// // lk"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AAAC;AAAA;AAGxB,MAAMC,IAAI,GAAGF,QAAQ,CAACG,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEjEH,IAAI,CAACI,MAAM,eACP;EAAA,uBACI,QAAC,GAAG;IAAA;IAAA;IAAA;EAAA;AAAG,iBACR,CACN;;AAID;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
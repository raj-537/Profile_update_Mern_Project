{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n// axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Make API Requests */\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('http://localhost:8080/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/** get User details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`http://localhost:8080/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n/** register user function */\nexport async function registerUser(credentials) {\n  try {\n    console.log(credentials);\n    // const { data : { msg }, status } = await axios.post(`http://localhost:8080/api/register`, credentials);\n    const response = await fetch('http://localhost:8080/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    const status = response.status;\n    const data = await response.json();\n    const msg = data.msg;\n\n    // const a=await axios.post(`http://localhost:8080/api/register`, credentials);\n\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      console.log(\"babu\");\n      await axios.post('http://localhost:8080/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n// Example Axios setup in your frontend code\n\n/** login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('http://localhost:8080/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/** update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('http://localhost:8080/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('http://localhost:8080/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post('http://localhost:8080/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** verify OTP */\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('http://localhost:8080/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('http://localhost:8080/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","console","log","response","fetch","method","headers","body","JSON","stringify","status","json","msg","email","userEmail","text","resolve","verifyPassword","password","updateUser","put","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/rajku/OneDrive/Desktop/Complete web dev/MERN_Login_App_with_ResetEmail-Main/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n// axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n\n/** Make API Requests */\n\n\n/** To get username from Token */\nexport async function getUsername(){\n    const token = localStorage.getItem('token')\n    if(!token) return Promise.reject(\"Cannot find Token\");\n    let decode = jwt_decode(token)\n    return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username){\n    try {\n        return await axios.post('http://localhost:8080/api/authenticate', { username })\n    } catch (error) {\n        return { error : \"Username doesn't exist...!\"}\n    }\n}\n\n/** get User details */\nexport async function getUser({ username }){\n    try {\n        const { data } = await axios.get(`http://localhost:8080/api/user/${username}`);\n        return { data };\n    } catch (error) {\n        return { error : \"Password doesn't Match...!\"}\n    }\n}\n\n/** register user function */\nexport async function registerUser(credentials){\n    try {  console.log(credentials)\n        // const { data : { msg }, status } = await axios.post(`http://localhost:8080/api/register`, credentials);\n        const response = await fetch('http://localhost:8080/api/register', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(credentials)\n          });\n          \n          const status = response.status;\n          const data = await response.json();\n          const msg = data.msg;\n\n        // const a=await axios.post(`http://localhost:8080/api/register`, credentials);\n\n      \n        \n\n        let { username, email } = credentials;\n\n        /** send email */\n        if(status === 201){\n            console.log(\"babu\")\n            await axios.post('http://localhost:8080/api/registerMail', { username, userEmail : email, text : msg})\n        }\n\n        return Promise.resolve(msg)\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}\n\n\n\n// Example Axios setup in your frontend code\n\n\n\n\n\n/** login function */\nexport async function verifyPassword({ username, password }){\n    try {\n        if(username){\n            const { data } = await axios.post('http://localhost:8080/api/login', { username, password })\n            return Promise.resolve({ data });\n        }\n    } catch (error) {\n        return Promise.reject({ error : \"Password doesn't Match...!\"})\n    }\n}\n\n/** update user profile function */\nexport async function updateUser(response){\n    try {\n        \n        const token = await localStorage.getItem('token');\n        const data = await axios.put('http://localhost:8080/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\n\n        return Promise.resolve({ data })\n    } catch (error) {\n        return Promise.reject({ error : \"Couldn't Update Profile...!\"})\n    }\n}\n\n/** generate OTP */\nexport async function generateOTP(username){\n    try {\n        const {data : { code }, status } = await axios.get('http://localhost:8080/api/generateOTP', { params : { username }});\n\n        // send mail with the OTP\n        if(status === 201){\n            let { data : { email }} = await getUser({ username });\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n            await axios.post('http://localhost:8080/api/registerMail', { username, userEmail: email, text, subject : \"Password Recovery OTP\"})\n        }\n        return Promise.resolve(code);\n    } catch (error) {\n        return Promise.reject({ error });\n    }\n}\n\n/** verify OTP */\nexport async function verifyOTP({ username, code }){\n    try {\n       const { data, status } = await axios.get('http://localhost:8080/api/verifyOTP', { params : { username, code }})\n       return { data, status }\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\n\n/** reset password */\nexport async function resetPassword({ username, password }){\n    try {\n        const { data, status } = await axios.put('http://localhost:8080/api/resetPassword', { username, password });\n        return Promise.resolve({ data, status})\n    } catch (error) {\n        return Promise.reject({ error })\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}